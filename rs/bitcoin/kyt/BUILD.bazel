load("@bazel_skylib//rules:common_settings.bzl", "string_setting")
load("@bazel_skylib//rules:copy_file.bzl", "copy_file")
load("@rules_rust//rust:defs.bzl", "rust_library", "rust_test")
load("//bazel:canisters.bzl", "rust_canister")
load("//bazel:defs.bzl", "rust_ic_test")
load("//bazel:pocket-ic-tests.bzl", "pocket_ic_mainnet_test", "test_using_pocket_ic_server")

package(default_visibility = ["//visibility:public"])

string_setting(
    name = "pocketic_variant",
    build_setting_default = "head",
    visibility = ["//visibility:public"],
)

config_setting(
    name = "pocketic_head",
    flag_values = {
        ":pocketic_variant": "head",
    },
)

config_setting(
    name = "pocketic_mainnet",
    flag_values = {
        ":pocketic_variant": "mainnet",
    },
)

copy_file(
    name = "pocket_ic",
    testonly = True,  # WHY
    src = select({
        ":pocketic_mainnet": "//:mainnet-pocket-ic",
        ":pocketic_head": "//rs/pocket_ic_server:pocket-ic-server",
        "//conditions:default": "//rs/pocket_ic_server:pocket-ic-server",
    }),
    out = "pocket-ic-server",
    is_executable = True,
)

rust_ic_test(
    name = "integration_tests",
    srcs = ["tests/tests.rs"],
    data = [
        ":btc_kyt_canister",
        ":pocket_ic",
    ],
    env = {
        "CARGO_MANIFEST_DIR": "rs/bitcoin/kyt",
        "IC_BTC_KYT_CANISTER_WASM_PATH": "$(rootpath :btc_kyt_canister)",
        "POCKET_IC_BIN": "$(rootpath :pocket_ic)",
    },
    deps = [
        # Keep sorted.
        ":btc_kyt_lib",
        "//packages/pocket-ic",
        "//rs/test_utilities/load_wasm",
        "@crate_index//:candid",
    ],
)

pocket_ic_mainnet_test(
    name = "integration_tests_mainnet",
    test = ":integration_tests",
)

rust_library(
    name = "btc_kyt_lib",
    srcs = glob(
        ["src/**"],
        exclude = ["src/main.rs"],
    ),
    crate_name = "ic_btc_kyt",
    deps = [
        # Keep sorted.
        "@crate_index//:bitcoin_0_32",
        "@crate_index//:candid",
        "@crate_index//:futures",
        "@crate_index//:ic-cdk",
        "@crate_index//:serde",
    ],
)

rust_test(
    name = "unit_tests",
    crate = ":btc_kyt_lib",
    deps = [
        # Keep sorted.
        "@crate_index//:bitcoin_0_32",
        "@crate_index//:candid_parser",
    ],
)

rust_test(
    name = "canister_tests",
    crate = ":_wasm_btc_kyt_canister",
    data = ["btc_kyt_canister.did"],
    env = {
        "CARGO_MANIFEST_DIR": "rs/bitcoin/kyt",
    },
    deps = [
        # Keep sorted.
        "@crate_index//:candid_parser",
    ],
)

rust_canister(
    name = "btc_kyt_canister",
    srcs = [
        "src/main.rs",
    ],
    proc_macro_deps = ["@crate_index//:ic-cdk-macros"],
    service_file = "btc_kyt_canister.did",
    deps = [
        # Keep sorted.
        ":btc_kyt_lib",
        "@crate_index//:bitcoin_0_32",
        "@crate_index//:candid",
        "@crate_index//:candid_parser",
        "@crate_index//:futures",
        "@crate_index//:ic-cdk",
    ],
)

test_using_pocket_ic_server(
    name = "integration_tests",
    srcs = ["tests/tests.rs"],
    data = [":btc_kyt_canister"],
    env = {
        "CARGO_MANIFEST_DIR": "rs/bitcoin/kyt",
        "IC_BTC_KYT_CANISTER_WASM_PATH": "$(rootpath :btc_kyt_canister)",
    },
    extra_HEAD_tags = ["manual"],
    macro = rust_ic_test,
    deps = [
        # Keep sorted.
        ":btc_kyt_lib",
        "//packages/pocket-ic",
        "//rs/test_utilities/load_wasm",
        "@crate_index//:candid",
    ],
)
